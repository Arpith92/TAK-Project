{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dd0f22c4-baf7-455a-8998-10f23bb4cd5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the date (dd-mmm-yyyy):  04-May-2025\n",
      "Enter the client name:  Amrithaa Uday\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Greetings from TravelAajkal,\n",
      "\n",
      "*Client Name: Amrithaa Uday*\n",
      "\n",
      "*Plan:- 4Days and 3Nights Indore-Ujjain-Omkareshwar-Indore for 2 Persons*\n",
      "\n",
      "*Itinerary:*\n",
      "\n",
      "*Day1:15-May-2025*\n",
      "nan: Pickup from Indore Airport/Railwaty station and travel to Ujjain (90 minutes, 60 km). Check-in at the hotel in Ujjain. Begin exploring Ujjain, visiting tourist attractions such as Ramghat, Bada Ganesh Ka Mandir, Vikramaditya, Mahakal Lok, and Mahakaleshwar Temple.\n",
      "*Ujjain Night Stay*\n",
      "\n",
      "*Day2:16-May-2025*\n",
      "00:00 hrs to 07:00 hrs, attend the Bhasm-Aarti Aarti. Return to the hotel room, take some rest, and then explore Ujjain. Tourist attractions include Sandipani Ashram, Mangalnath Temple, Siddhwat, Kaal-Bhairav Temple, Gadkalika Mandir, Harshiddhi Temple, and Santoshi Mata Temple, Chintaman Ganesh.\n",
      "*Ujjain Night stay*\n",
      "\n",
      "*Day3:17-May-2025*\n",
      "Check out from the hotel in Ujjain and travel to Omkareshwar (5Hrs - 150Km). Explore Omkareshwar and Mamleshwar. Travel to Indore (3Hrs - 90Km). Late at night, explore Indore's famous Sarafa Bazaar.\n",
      "*Indore Night stay*\n",
      "\n",
      "*Day4:18-May-2025*\n",
      "Check out from the hotel and explore Indore by visiting attractions such as Khajrana Temple, Rajwada Palace, Annapurna Temple, Lal Bagh Palace, Regional Park, Treasure Island Mall, Chappan Dukan, and the Central Museum. Later, proceed for drop-off at Indore Airport/Railway Station.\n",
      "\n",
      "*Package cost: 27,999/-*\n",
      "(AC Sedan(CNG) car,3star AC Hotel room with Breakfast,Bhasmarathi ticket)\n",
      "\n",
      "*Inclusions:-*\n",
      "1. Entire travel as per itinerary by AC Sedan(CNG) car.\n",
      "2. Toll, parking, and driver bata are included.\n",
      "3. Airport/ Railway station pickup and drop.\n",
      "4. Bhasmarathi ticket for 2 Persons.\n",
      "5. Bhasm-Aarti pickup and drop.\n",
      "6. 2Night Ujjain stay in Double occupancy 1 room in 3star AC Hotel room with Breakfast.\n",
      "7. Standard check-in at 12:00 PM and check-out at 09:00 AM.\n",
      "8. Early check-in and late check-out are subject to room availability.\n",
      "\n",
      "*Exclusions:-*\n",
      "1. Any meals or beverages not specified in the itinerary are not included.(e.g.Breakfast,lunch, dinner snacks, personal beverages).\n",
      "2. Entry fees for any tourist attractions, temples, or monuments not specified in the inclusions.\n",
      "3. Travel insurance.\n",
      "4. Expenses related to personal shopping, tips, or gratuities.\n",
      "5. Any additional charges for early check-in or late check-out if rooms are not available.\n",
      "6. Costs arising due to natural events, unforeseen roadblocks, or personal travel changes.\n",
      "7. Additional charges for any sightseeing spots not listed in the itinerary.\n",
      "\n",
      "*Important Notes:-*\n",
      "1. Any tourist attractions not mentioned in the itinerary will incur additional charges.\n",
      "2. Visits to tourist spots or temples are subject to traffic conditions and temple management restrictions. If any tourist spot or temple is closed on the specific day of travel due to unforeseen circumstances, TravelaajKal will not be responsible, and no refunds will be provided.\n",
      "3. For Bhasm-Aarti, we will provide tickets, but timely arrival at the temple and seating arrangements are beyond our control.\n",
      "4. We only facilitate the booking of Bhasm-Aarti tickets. The ticket cost will be charged at actuals, as mentioned on the ticket.\n",
      "5. No commitment can be made regarding ticket availability. Bhasm-Aarti tickets are subject to availability and may be canceled at any time based on the decisions of the temple management committee. In case of an unconfirmed ticket, the ticket cost will be refunded.\n",
      "6. Entry to the hotel is subject to the hotel's rules and regulations. A valid ID proof (Indian citizenship) is required. Only married couples are allowed entry.\n",
      "7. Children above 9 years will be considered as adults. Children under 9 years must share the same bed with parents. If an extra bed is required, additional charges will apply.\n",
      "\n",
      "*Cancellation Policy:-*\n",
      "1. 30+ days before travel → 20% of the advance amount will be deducted.\n",
      "2. 15-29 days before travel → 50% of the advance amount will be deducted.\n",
      "3. Less than 15 days before travel → No refund on the advance amount.\n",
      "4. No refund for no-shows, last-minute cancellations, or early departures.\n",
      "5. One-time rescheduling is allowed if requested at least 15 days before the travel date, subject to availability.\n",
      "\n",
      "*Payment Terms:-*\n",
      "50% advance and reamining 50% after arrival at Ujjain.\n",
      "\n",
      "For booking confirmation, please make the advance payment to the company's current account provided below.\n",
      "\n",
      "*Company Account details:-*\n",
      "Account Name: ACHALA HOLIDAYS PVT LTD\n",
      "Bank: Axis Bank\n",
      "Account No: 923020071937652\n",
      "IFSC Code: UTIB0000329\n",
      "MICR Code: 452211003\n",
      "Branch Address: Ground Floor, 77, Dewas Road, Ujjain, Madhya Pradesh 456010\n",
      "\n",
      "Regards,\n",
      "Team TravelAajKal™️\n",
      "Reg. Achala Holidays Pvt Limited\n",
      "Visit :- www.travelaajkal.com\n",
      "Follow us :- https://www.instagram.com/travelaaj_kal/\n",
      "\n",
      "*Great news! ACHALA HOLIDAYS PVT LTD is now a DPIIT-recognized Startup by the Government of India.*\n",
      "*Thank you for your support as we continue to redefine travel.*\n",
      "*Travel Aaj aur Kal with us!*\n",
      "\n",
      "TravelAajKal® is a registered trademark of Achala Holidays Pvt Ltd.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import math\n",
    "import locale\n",
    "import numpy as np\n",
    "\n",
    "# File paths\n",
    "input_folder = r\"C:\\Users\\Arpith Shetty\\Desktop\\TAK Project\\Ver_1\\Input\"\n",
    "code_file_path = r\"C:\\Users\\Arpith Shetty\\Desktop\\TAK Project\\Ver_1\\code.xlsx\"\n",
    "bhasmarathi_type_path = r\"C:\\Users\\Arpith Shetty\\Desktop\\TAK Project\\Ver_1\\Bhasmarathi_Type.xlsx\"\n",
    "\n",
    "# Load Stay_City data\n",
    "stay_city_data = r\"C:\\Users\\Arpith Shetty\\Desktop\\TAK Project\\Ver_1\\Stay_City.xlsx\"\n",
    "try:\n",
    "    stay_city_data = pd.read_excel(stay_city_data, sheet_name=\"Stay_City\")\n",
    "except Exception as e:\n",
    "    print(f\"Error loading Stay_City file: {e}\")\n",
    "    exit()\n",
    "\n",
    "# Input date and client name\n",
    "date = input(\"Enter the date (dd-mmm-yyyy): \").strip()\n",
    "client_name = input(\"Enter the client name: \").strip()\n",
    "\n",
    "#df['Time'] = df['Time'].fillna(\"\")\n",
    "\n",
    "# Input date and client name\n",
    "#date = \"10-Dec-2024\"\n",
    "#client_name = \"Himangani\"\n",
    "\n",
    "# File selection\n",
    "input_file = os.path.join(input_folder, f\"{date}.xlsx\")\n",
    "if not os.path.exists(input_file):\n",
    "    print(f\"Error: File {input_file} does not exist.\")\n",
    "    exit()\n",
    "\n",
    "# Load input file and search for client sheet\n",
    "try:\n",
    "    input_data = pd.ExcelFile(input_file)\n",
    "except Exception as e:\n",
    "    print(f\"Error loading file {input_file}: {e}\")\n",
    "    exit()\n",
    "\n",
    "if client_name not in input_data.sheet_names:\n",
    "    print(f\"Error: Sheet named '{client_name}' not found in file {input_file}.\")\n",
    "    print(\"Available sheets:\", input_data.sheet_names)\n",
    "    exit()\n",
    "\n",
    "# Load the client sheet\n",
    "client_data = input_data.parse(sheet_name=client_name)\n",
    "\n",
    "# Load the code file\n",
    "if not os.path.exists(code_file_path):\n",
    "    print(f\"Error: File {code_file_path} does not exist.\")\n",
    "    exit()\n",
    "\n",
    "try:\n",
    "    # Replace 'Sheet1' with the actual sheet name in code.xlsx\n",
    "    code_data = pd.read_excel(code_file_path, sheet_name='Code')\n",
    "except Exception as e:\n",
    "    print(f\"Error loading code file: {e}\")\n",
    "    exit()\n",
    "\n",
    "#client_data = input_data.parse(sheet_name=client_name)\n",
    "#print(\"Available sheets:\", input_data.sheet_names)\n",
    "\n",
    "if client_name not in input_data.sheet_names:\n",
    "    print(f\"Error: Sheet named '{client_name}' not found in file {input_file}.\")\n",
    "    #print(\"Available sheets:\", input_data.sheet_names)\n",
    "    exit()\n",
    "\n",
    "# Load the client sheet\n",
    "#client_data = input_data.parse(sheet_name=client_name)\n",
    "\n",
    "# Load the code file\n",
    "if not os.path.exists(code_file_path):\n",
    "    print(f\"Error: File {code_file_path} does not exist.\")\n",
    "    exit()\n",
    "\n",
    "try:\n",
    "    # Replace 'Sheet1' with the actual sheet name in code.xlsx\n",
    "    code_data = pd.read_excel(code_file_path, sheet_name='Code')\n",
    "except Exception as e:\n",
    "    print(f\"Error loading code file: {e}\")\n",
    "    exit()\n",
    "\n",
    "# Ensure code_data is defined\n",
    "if 'code_data' not in locals():\n",
    "    print(\"Error: code_data not defined. Check the code file and sheet name.\")\n",
    "    exit()\n",
    "\n",
    "# Match codes and generate itinerary\n",
    "itinerary = []\n",
    "for _, row in client_data.iterrows():\n",
    "    code = row.get('Code', None)\n",
    "    if code is None:\n",
    "        itinerary.append({\n",
    "            'Date': row.get('Date', 'N/A'),\n",
    "            'Time': row.get('Time', 'N/A'),\n",
    "            'Description': \"No code provided in row\"\n",
    "        })\n",
    "        continue\n",
    "\n",
    "    particulars = code_data.loc[code_data['Code'] == code, 'Particulars'].values\n",
    "    if particulars.size > 0:\n",
    "        description = particulars[0]\n",
    "        itinerary.append({\n",
    "            'Date': row.get('Date', 'N/A'),\n",
    "            'Time': row.get('Time', 'N/A'),\n",
    "            'Description': description\n",
    "        })\n",
    "    else:\n",
    "        itinerary.append({\n",
    "            'Date': row.get('Date', 'N/A'),\n",
    "            'Time': row.get('Time', 'N/A'),\n",
    "            'Description': f\"No description found for code {code}\"\n",
    "        })\n",
    "\n",
    "# Calculate total days and nights\n",
    "start_date = pd.to_datetime(client_data['Date'].min())\n",
    "end_date = pd.to_datetime(client_data['Date'].max())\n",
    "total_days = (end_date - start_date).days + 1\n",
    "total_nights = total_days - 1\n",
    "\n",
    "# Get total pax\n",
    "total_pax = int(client_data['Total Pax'].iloc[0])\n",
    "\n",
    "# Determine the correct singular or plural for nights\n",
    "night_text = \"Night\" if total_nights == 1 else \"Nights\"\n",
    "\n",
    "# Determine the correct singular or plural for nights\n",
    "person_text = \"Person\" if {total_pax} == 1 else \"Persons\"\n",
    "\n",
    "# Generate route by matching codes\n",
    "route_parts = []\n",
    "for code in client_data['Code']:\n",
    "    matched_routes = code_data.loc[code_data['Code'] == code, 'Route']\n",
    "    if not matched_routes.empty:\n",
    "        route_parts.append(matched_routes.iloc[0])\n",
    "\n",
    "# Join the routes with a separator and ensure no unnecessary spaces\n",
    "route = '-'.join(route_parts).replace(' -', '-').replace('- ', '-')\n",
    "\n",
    "# Remove consecutive duplicate city names\n",
    "route_list = route.split('-')\n",
    "final_route = '-'.join([route_list[i] for i in range(len(route_list)) if i == 0 or route_list[i] != route_list[i - 1]])\n",
    "\n",
    "# Join cleaned route list with \"-\"\n",
    "route = \"-\".join(route_list)\n",
    "\n",
    "# Calculate total package cost (from single sheet with all relevant columns)\n",
    "def calculate_package_cost(input_data):\n",
    "    # Sum the relevant costs from the columns in the same sheet\n",
    "    car_cost = input_data['Car Cost'].sum()\n",
    "    hotel_cost = input_data['Hotel Cost'].sum()\n",
    "    bhasmarathi_cost = input_data['Bhasmarathi Cost'].sum()\n",
    "    \n",
    "    total_cost = car_cost + hotel_cost + bhasmarathi_cost\n",
    "    # Apply ceiling to the sum, subtract 1 as per your formula\n",
    "    total_package_cost = math.ceil(total_cost / 1000) * 1000 - 1\n",
    "    return total_package_cost\n",
    "\n",
    "locale.setlocale(locale.LC_ALL, 'en_IN')\n",
    "total_package_cost = calculate_package_cost(client_data)\n",
    "formatted_cost = int(locale.format_string(\"%d\", total_package_cost, grouping=True).replace(\",\", \"\"))\n",
    "formatted_cost1 =(f\"{formatted_cost:,}\".replace(\",\", \"X\").replace(\"X\", \",\", 1))\n",
    "\n",
    "# Retrieve package cost\n",
    "#total_package_cost = calculate_package_cost(client_data)\n",
    "\n",
    "# Extract car types, hotel types, and Bhasmarathi descriptions\n",
    "car_types = client_data['Car Type'].dropna().unique()\n",
    "car_types_str = '-'.join(car_types)\n",
    "\n",
    "hotel_types = client_data['Hotel Type'].dropna().unique()\n",
    "hotel_types_str = '-'.join(hotel_types)\n",
    "\n",
    "# Load Bhasmarathi type mapping\n",
    "if not os.path.exists(bhasmarathi_type_path):\n",
    "    print(f\"Error: File {bhasmarathi_type_path} does not exist.\")\n",
    "    exit()\n",
    "\n",
    "try:\n",
    "    bhasmarathi_data = pd.read_excel(bhasmarathi_type_path)\n",
    "except Exception as e:\n",
    "    print(f\"Error loading Bhasmarathi_Type file: {e}\")\n",
    "    exit()\n",
    "\n",
    "bhasmarathi_types = client_data['Bhasmarathi Type'].dropna().unique()\n",
    "bhasmarathi_descriptions = []\n",
    "\n",
    "for bhas_type in bhasmarathi_types:\n",
    "    match = bhasmarathi_data.loc[bhasmarathi_data['Bhasmarathi Type'] == bhas_type, 'Description']\n",
    "    if not match.empty:\n",
    "        bhasmarathi_descriptions.append(match.iloc[0])\n",
    "\n",
    "bhasmarathi_desc_str = '-'.join(bhasmarathi_descriptions)\n",
    "\n",
    "# Combine into final line\n",
    "details_line = f\"({car_types_str},{hotel_types_str},{bhasmarathi_desc_str})\"\n",
    "\n",
    "# Generate the itinerary message\n",
    "greeting = f\"Greetings from TravelAajkal,\\n\\n*Client Name: {client_name}*\\n\\n\"\n",
    "plan = f\"*Plan:- {total_days}Days and {total_nights}{night_text} {final_route} for {total_pax} {person_text}*\"\n",
    "\n",
    "# Start building the itinerary\n",
    "itinerary_message = greeting + plan + \"\\n\\n*Itinerary:*\\n\"\n",
    "\n",
    "# Group by date and add events to the itinerary\n",
    "grouped_itinerary = {}\n",
    "\n",
    "for entry in itinerary:\n",
    "    if entry['Date'] != 'N/A' and pd.notna(entry['Date']):\n",
    "        date = pd.to_datetime(entry['Date']).strftime('%d-%b-%Y')  # Format the date\n",
    "        if date not in grouped_itinerary:\n",
    "            grouped_itinerary[date] = []\n",
    "        grouped_itinerary[date].append(f\"{entry['Time']}: {entry['Description']}\")\n",
    "\n",
    "# Iterate over the grouped itinerary to format it\n",
    "day_number = 1  # Initialize the day number for the first day\n",
    "first_day = True  # Flag to track the first day for adding time\n",
    "for date, events in grouped_itinerary.items():\n",
    "    itinerary_message += f\"\\n*Day{day_number}:{date}*\\n\"  # Add day number\n",
    "    for event in events:\n",
    "        if first_day:\n",
    "            itinerary_message += f\"{event}\\n\"\n",
    "            first_day = False\n",
    "        else:\n",
    "            itinerary_message += f\"{event[5:]}\\n\"  # Remove time for other days\n",
    "    \n",
    "    day_number += 1  # Increment the day number for the next iteration\n",
    "\n",
    "# Add the total package cost at the end\n",
    "itinerary_message += f\"\\n*Package cost: {formatted_cost1}/-*\\n{details_line}\"\n",
    "\n",
    "# Initialize inclusions list\n",
    "inclusions = []\n",
    "\n",
    "# 1. If Car Type has value\n",
    "if not client_data['Car Type'].dropna().empty:\n",
    "    inclusions.append(f\"Entire travel as per itinerary by {car_types_str}.\")\n",
    "    inclusions.append(\"Toll, parking, and driver bata are included.\")\n",
    "    inclusions.append(\"Airport/ Railway station pickup and drop.\")\n",
    "\n",
    "# 2. If Bhasmarathi Type has value\n",
    "if not client_data['Bhasmarathi Type'].dropna().empty:\n",
    "    #total_pax = (client_data['Total Pax'].iloc[0])  # Assuming 'Total Pax' column exists\n",
    "    inclusions.append(f\"{bhasmarathi_desc_str} for {total_pax} {person_text}.\")\n",
    "    inclusions.append(\"Bhasm-Aarti pickup and drop.\")\n",
    "\n",
    "# 3. Hotel stay\n",
    "# Check if default room type is available in client data\n",
    "if \"Room Type\" in client_data.columns:\n",
    "    default_room_configuration = client_data[\"Room Type\"].iloc[0]  # Default value from client data\n",
    "\n",
    "# Iterate through each row in client_data\n",
    "if \"Stay City\" in client_data.columns and \"Room Type\" in client_data.columns:\n",
    "    city_nights = {}\n",
    "    for i in range(len(client_data)):\n",
    "        stay_city = client_data[\"Stay City\"].iloc[i]\n",
    "        room_type = client_data[\"Room Type\"].iloc[i]\n",
    "\n",
    "        # Skip rows with NaN values in Stay City\n",
    "        if pd.isna(stay_city):\n",
    "            continue\n",
    "        stay_city = stay_city.strip()  # Clean any extra spaces\n",
    "\n",
    "        # Compare current Stay City with previous row and count nights\n",
    "        if i > 0 and client_data[\"Stay City\"].iloc[i] == client_data[\"Stay City\"].iloc[i - 1]:\n",
    "            city_nights[stay_city] += 1  # Increment nights for the same city\n",
    "        else:\n",
    "            city_nights[stay_city] = 1  # Start counting nights for a new city\n",
    "\n",
    "    # Initialize total night counter\n",
    "    total_used_nights = 0\n",
    "\n",
    "    # Build inclusions dynamically\n",
    "    for i in range(len(client_data)):\n",
    "        stay_city = client_data[\"Stay City\"].iloc[i]\n",
    "        room_type = client_data[\"Room Type\"].iloc[i]\n",
    "\n",
    "        # Skip rows with NaN values in Stay City\n",
    "        if pd.isna(stay_city):\n",
    "            continue\n",
    "        stay_city = stay_city.strip()  # Clean any extra spaces\n",
    "\n",
    "        # Get city name and check if total nights constraint is met\n",
    "        matching_row = stay_city_data[stay_city_data[\"Stay City\"] == stay_city]\n",
    "        if not matching_row.empty:\n",
    "            city_name = matching_row[\"City\"].iloc[0]\n",
    "\n",
    "            # Check total nights constraint\n",
    "            if total_used_nights + city_nights[stay_city] <= total_nights:\n",
    "                inclusions.append(\n",
    "                    f\"{city_nights[stay_city]}Night {city_name} stay in {room_type} in {hotel_types_str}.\"\n",
    "                )\n",
    "                total_used_nights += city_nights[stay_city]\n",
    "            else:\n",
    "                break  # Stop if the total nights exceed the allowed limit                \n",
    "# 4. If Hotel Type has value\n",
    "if not client_data['Hotel Type'].dropna().empty:\n",
    "    inclusions.append(\"Standard check-in at 12:00 PM and check-out at 09:00 AM.\")\n",
    "    inclusions.append(\"Early check-in and late check-out are subject to room availability.\")\n",
    "  #  if not client_data.loc[client_data['Hotel Type'] != 'Standard AC Hotel room only'].empty:\n",
    "       # inclusions.append(\"Breakfast included.\")\n",
    "\n",
    "# Combine inclusions into a formatted list\n",
    "inclusions_section = \"*Inclusions:-*\\n\" + \"\\n\".join([f\"{i + 1}. {line}\" for i, line in enumerate(inclusions)])\n",
    "\n",
    "# Combine with the itinerary message\n",
    "final_message = itinerary_message + \"\\n\\n\" + inclusions_section\n",
    "\n",
    "# Initialize exclusions list\n",
    "exclusions = []\n",
    "\n",
    "# 1. Bhasmarathi pick-up and drop (if Bhasmarathi Type not blank)\n",
    "#if not client_data['Bhasmarathi Type'].dropna().empty:\n",
    " #   exclusions.append(\"Bhasmarathi pick-up and drop.\")\n",
    "\n",
    "# 2. Meals or beverages\n",
    "exclusions.append(\"Any meals or beverages not specified in the itinerary are not included.(e.g.Breakfast,lunch, dinner snacks, personal beverages).\")\n",
    "\n",
    "# 3. Entry fees (if Car Type is not blank)\n",
    "if not client_data['Car Type'].dropna().empty:\n",
    "    exclusions.append(\"Entry fees for any tourist attractions, temples, or monuments not specified in the inclusions.\")\n",
    "\n",
    "# 4. Travel insurance\n",
    "exclusions.append(\"Travel insurance.\")\n",
    "\n",
    "# 5. Personal expenses (if Car Type is not blank)\n",
    "if not client_data['Car Type'].dropna().empty:\n",
    "    exclusions.append(\"Expenses related to personal shopping, tips, or gratuities.\")\n",
    "\n",
    "# 6. Early check-in or late check-out charges (if Hotel Type is not blank)\n",
    "if not client_data['Hotel Type'].dropna().empty:\n",
    "    exclusions.append(\"Any additional charges for early check-in or late check-out if rooms are not available.\")\n",
    "\n",
    "# 7. Costs due to unforeseen events (if Car Type is not blank)\n",
    "if not client_data['Car Type'].dropna().empty:\n",
    "    exclusions.append(\"Costs arising due to natural events, unforeseen roadblocks, or personal travel changes.\")\n",
    "\n",
    "# 8. Charges for additional sightseeing spots (if Car Type is not blank)\n",
    "if not client_data['Car Type'].dropna().empty:\n",
    "    exclusions.append(\"Additional charges for any sightseeing spots not listed in the itinerary.\")\n",
    "\n",
    "# Combine exclusions into a formatted list\n",
    "exclusions_section = \"\\n*Exclusions:-*\\n\" + \"\\n\".join([f\"{i + 1}. {line}\" for i, line in enumerate(exclusions)])\n",
    "\n",
    "# Initialize important notes list\n",
    "important_notes = []\n",
    "\n",
    "# 1. Additional charges for tourist attractions (Car Type is not blank)\n",
    "if not client_data['Car Type'].dropna().empty:\n",
    "    important_notes.append(\"Any tourist attractions not mentioned in the itinerary will incur additional charges.\")\n",
    "\n",
    "# 2. Visits to tourist spots (Car Type is not blank)\n",
    "if not client_data['Car Type'].dropna().empty:\n",
    "    important_notes.append(\"Visits to tourist spots or temples are subject to traffic conditions and temple management restrictions. If any tourist spot or temple is closed on the specific day of travel due to unforeseen circumstances, TravelaajKal will not be responsible, and no refunds will be provided.\")\n",
    "\n",
    "# 3. Bhasma Aarti ticket details (Bhasmarathi Type is not blank)\n",
    "if not client_data['Bhasmarathi Type'].dropna().empty:\n",
    "    important_notes.append(\"For Bhasm-Aarti, we will provide tickets, but timely arrival at the temple and seating arrangements are beyond our control.\")\n",
    "\n",
    "# 4. Hotel entry rules (Hotel Type is not blank)\n",
    "#if not client_data['Hotel Type'].dropna().empty:\n",
    " #   important_notes.append(\"Entry to the hotel is subject to the hotel's rules and regulations. A valid ID proof (Indian citizenship) is required. Only married couples are allowed entry.\")\n",
    "\n",
    "# 5.Bhasma Aarti ticket cancellation policy (Bhasmarathi Type is not blank)\n",
    "if not client_data['Bhasmarathi Type'].dropna().empty:\n",
    "    important_notes.append(\"We only facilitate the booking of Bhasm-Aarti tickets. The ticket cost will be charged at actuals, as mentioned on the ticket.\")\n",
    "\n",
    "#6.Bhasma Aarti ticket cancellation policy (Bhasmarathi Type is not blank)\n",
    "if not client_data['Bhasmarathi Type'].dropna().empty:\n",
    "    important_notes.append(\"No commitment can be made regarding ticket availability. Bhasm-Aarti tickets are subject to availability and may be canceled at any time based on the decisions of the temple management committee. In case of an unconfirmed ticket, the ticket cost will be refunded.\")\n",
    "\n",
    "# 7. Hotel entry rules (Hotel Type is not blank)\n",
    "if not client_data['Hotel Type'].dropna().empty:\n",
    "    important_notes.append(\"Entry to the hotel is subject to the hotel's rules and regulations. A valid ID proof (Indian citizenship) is required. Only married couples are allowed entry.\")\n",
    "\n",
    "# 8. Hotel entry rules (Hotel Type is not blank) with child rule\n",
    "if not client_data['Hotel Type'].dropna().empty:\n",
    "    important_notes.append(\"Children above 9 years will be considered as adults. Children under 9 years must share the same bed with parents. If an extra bed is required, additional charges will apply.\")\n",
    "\n",
    "# Combine important notes into a formatted list\n",
    "important_notes_section = \"\\n*Important Notes:-*\\n\" + \"\\n\".join([f\"{i + 1}. {line}\" for i, line in enumerate(important_notes)])\n",
    "\n",
    "# Initialize Cancellation Policy\n",
    "Cancellation_Policy = \"\"\"\n",
    "*Cancellation Policy:-*\n",
    "1. 30+ days before travel → 20% of the advance amount will be deducted.\n",
    "2. 15-29 days before travel → 50% of the advance amount will be deducted.\n",
    "3. Less than 15 days before travel → No refund on the advance amount.\n",
    "4. No refund for no-shows, last-minute cancellations, or early departures.\n",
    "5. One-time rescheduling is allowed if requested at least 15 days before the travel date, subject to availability.\n",
    "\"\"\"\n",
    "\n",
    "#Payment terms\n",
    "Payment_terms = \"\"\"*Payment Terms:-*\n",
    "50% advance and reamining 50% after arrival at Ujjain.\n",
    "\"\"\"\n",
    "\n",
    "# Add booking confirmation message and company account details\n",
    "booking_confirmation = \"\"\"For booking confirmation, please make the advance payment to the company's current account provided below.\n",
    "\n",
    "*Company Account details:-*\n",
    "Account Name: ACHALA HOLIDAYS PVT LTD\n",
    "Bank: Axis Bank\n",
    "Account No: 923020071937652\n",
    "IFSC Code: UTIB0000329\n",
    "MICR Code: 452211003\n",
    "Branch Address: Ground Floor, 77, Dewas Road, Ujjain, Madhya Pradesh 456010\n",
    "\n",
    "Regards,\n",
    "Team TravelAajKal™️\n",
    "Reg. Achala Holidays Pvt Limited\n",
    "Visit :- www.travelaajkal.com\n",
    "Follow us :- https://www.instagram.com/travelaaj_kal/\n",
    "\n",
    "*Great news! ACHALA HOLIDAYS PVT LTD is now a DPIIT-recognized Startup by the Government of India.*\n",
    "*Thank you for your support as we continue to redefine travel.*\n",
    "*Travel Aaj aur Kal with us!*\n",
    "\n",
    "TravelAajKal® is a registered trademark of Achala Holidays Pvt Ltd.\n",
    "\"\"\"\n",
    "\n",
    "# Print the final output\n",
    "print(final_message)\n",
    "\n",
    "# Print or add the exclusions section to your final output\n",
    "print(exclusions_section)\n",
    "\n",
    "# Print or add the important notes section to your final output\n",
    "print(important_notes_section)\n",
    "\n",
    "print(Cancellation_Policy)\n",
    "\n",
    "print(Payment_terms)\n",
    "\n",
    "# Print or append this section to your f4inal output\n",
    "print(booking_confirmation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71846a51-026b-475c-a998-76866294a615",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b6d0755-5b18-404a-97cd-80ed8ce12d8c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a985e7e-933e-4812-a15e-495ac9e1ed38",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
